// ************************************************************************ //
// WARNING                                                                    
// -------                                                                    
// The types declared in this file were generated from data read from a       
// Type Library. If this type library is explicitly or indirectly (via        
// another type library referring to this type library) re-imported, or the   
// 'Refresh' command of the Type Library Editor activated while editing the   
// Type Library, the contents of this file will be regenerated and all        
// manual modifications will be lost.                                         
// ************************************************************************ //

// C++ TLBWRTR : $Revision:   1.151.1.0.1.27  $
// File generated on 2010/9/12 21:28:53 from Type Library described below.

// ************************************************************************  //
// Type Lib: C:\Windows\System32\MSCOMM32.OCX (1)
// LIBID: {648A5603-2C6E-101B-82B6-000000000014}
// LCID: 0
// Helpfile: C:\Windows\System32\COMM98.CHM
// HelpString: Microsoft Comm Control 6.0
// DepndLst: 
//   (1) v2.0 stdole, (C:\Windows\system32\stdole2.tlb)
// ************************************************************************ //
#ifndef   MSCommLib_OCXH
#define   MSCommLib_OCXH

#pragma option push -b -w-inl

#include <olectrls.hpp>
#include <oleserver.hpp>
#include <utilcls.h>
#if !defined(__UTILCLS_H_VERSION) || (__UTILCLS_H_VERSION < 0x0600)
//
// The code generated by the TLIBIMP utility or the Import|TypeLibrary 
// and Import|ActiveX feature of C++Builder rely on specific versions of
// the header file UTILCLS.H found in the INCLUDE\VCL directory. If an 
// older version of the file is detected, you probably need an update/patch.
//
#error "This file requires a newer version of the header UTILCLS.H" \
       "You need to apply an update/patch to your copy of C++Builder"
#endif
#include <olectl.h>
#include <ocidl.h>
#if !defined(_NO_VCL)
#include <stdvcl.hpp>
#endif  //   _NO_VCL
#include <ocxproxy.h>

#include "MSCommLib_TLB.h"
namespace Mscommlib_tlb
{

// *********************************************************************//
// HelpString: Microsoft Comm Control 6.0
// Version:    1.1
// *********************************************************************//


// *********************************************************************//
// COM Component Proxy Class Declaration
// Component Name   : TMSComm
// Help String      : Microsoft Comm Control 6.0
// Default Interface: IMSComm
// Def. Intf. Object: TCOMIMSComm
// Def. Intf. DISP? : No
// Event   Interface: DMSCommEvents
// TypeFlags        : (38) CanCreate Licensed Control
// *********************************************************************//

// *********************************************************************//
// Definition of closures to allow VCL handlers to catch OCX events.      
// *********************************************************************//
//+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-
// Proxy class to host Microsoft Comm Control 6.0 in CBuilder IDE/Applications.
//-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
class PACKAGE TMSComm : public TOleControl
{
  OVERLOADED_PROP_METHODS;
  static TNoParam  OptParam;
  static GUID      DEF_CTL_INTF;

  // Instance of Closures to expose OCX Events as VCL ones
  //
  TNotifyEvent                   FOnComm;

  // Default Interace of OCX
  //
  TCOMIMSComm m_OCXIntf;

  // VCL Property Getters/Setters which delegate to OCX
  //
  void            __fastcall set_Output(VARIANT pvarOutput/*[in]*/);
  TVariant        __fastcall get_Output(void);
  void            __fastcall set_Input(VARIANT pvarInput/*[in]*/);
  TVariant        __fastcall get_Input(void);

  // Static variables used by all instances of OCX proxy
  //
  static int          EventDispIDs[1];
  static TControlData CControlData;
  static GUID         CTL_DEF_INTF;

  // Method providing access to interface as __property 
  //
  TCOMIMSComm __fastcall GetDefaultInterface();
  TCOMIMSComm __fastcall GetControlInterface()
  { return GetDefaultInterface(); }

protected:
  void     __fastcall CreateControl  ();
  void     __fastcall InitControlData();

public:
  virtual  __fastcall TMSComm(TComponent* AOwner) : TOleControl(AOwner)
  {};
  virtual  __fastcall TMSComm(HWND        Parent) : TOleControl(Parent)
  {};

  // OCX methods
  //
  void            __fastcall AboutBox(void);

  // OCX properties
  //
  __property int CDTimeout={ read=GetIntegerProp, write=SetIntegerProp, index=2 };
  __property short _CommPort={ read=GetSmallintProp, write=SetSmallintProp, index=0 };
  __property int CTSTimeout={ read=GetIntegerProp, write=SetIntegerProp, index=6 };
  __property int DSRTimeout={ read=GetIntegerProp, write=SetIntegerProp, index=8 };
  __property int Interval={ read=GetIntegerProp, write=SetIntegerProp, index=15 };
  __property System::OleVariant Output={ read=GetOleVariantProp, write=SetOleVariantProp, index=25 };
  __property System::OleVariant Input={ read=GetOleVariantProp, write=SetOleVariantProp, index=26 };
  __property TCOMIMSComm ControlInterface={ read=GetDefaultInterface };

  // Published properties
  //
__published:

  // Standard/Extended properties
  //

  // OCX properties
  //
  __property bool CDHolding={ read=GetWordBoolProp, write=SetWordBoolProp, stored=false, index=1 };
  __property int CommID={ read=GetIntegerProp, write=SetIntegerProp, stored=false, index=3 };
  __property short CommPort={ read=GetSmallintProp, write=SetSmallintProp, stored=false, index=4 };
  __property bool CTSHolding={ read=GetWordBoolProp, write=SetWordBoolProp, stored=false, index=5 };
  __property bool DSRHolding={ read=GetWordBoolProp, write=SetWordBoolProp, stored=false, index=7 };
  __property bool DTREnable={ read=GetWordBoolProp, write=SetWordBoolProp, stored=false, index=9 };
  __property Activex::TOleEnum Handshaking={ read=GetTOleEnumProp, write=SetTOleEnumProp, stored=false, index=10 };
  __property short InBufferSize={ read=GetSmallintProp, write=SetSmallintProp, stored=false, index=11 };
  __property short InBufferCount={ read=GetSmallintProp, write=SetSmallintProp, stored=false, index=12 };
  __property bool Break={ read=GetWordBoolProp, write=SetWordBoolProp, stored=false, index=13 };
  __property short InputLen={ read=GetSmallintProp, write=SetSmallintProp, stored=false, index=14 };
  __property bool NullDiscard={ read=GetWordBoolProp, write=SetWordBoolProp, stored=false, index=16 };
  __property short OutBufferSize={ read=GetSmallintProp, write=SetSmallintProp, stored=false, index=17 };
  __property short OutBufferCount={ read=GetSmallintProp, write=SetSmallintProp, stored=false, index=18 };
  __property System::WideString ParityReplace={ read=GetWideStringProp, write=SetWideStringProp, stored=false, index=19 };
  __property bool PortOpen={ read=GetWordBoolProp, write=SetWordBoolProp, stored=false, index=20 };
  __property short RThreshold={ read=GetSmallintProp, write=SetSmallintProp, stored=false, index=21 };
  __property bool RTSEnable={ read=GetWordBoolProp, write=SetWordBoolProp, stored=false, index=22 };
  __property System::WideString Settings={ read=GetWideStringProp, write=SetWideStringProp, stored=false, index=23 };
  __property short SThreshold={ read=GetSmallintProp, write=SetSmallintProp, stored=false, index=24 };
  __property short CommEvent={ read=GetSmallintProp, write=SetSmallintProp, stored=false, index=27 };
  __property bool EOFEnable={ read=GetWordBoolProp, write=SetWordBoolProp, stored=false, index=28 };
  __property Activex::TOleEnum InputMode={ read=GetTOleEnumProp, write=SetTOleEnumProp, stored=false, index=29 };

  // OCX Events
  //
  __property TNotifyEvent OnComm={ read=FOnComm, write=FOnComm };
};
typedef TMSComm  TMSCommProxy;

};     // namespace Mscommlib_tlb

#if !defined(NO_IMPLICIT_NAMESPACE_USE)
using  namespace Mscommlib_tlb;
#endif

#pragma option pop

#endif // MSCommLib_OCXH
